---
- name: Find IBM Cloud Log Routing Tenants by Region
  hosts: localhost
  connection: local
  gather_facts: false # No need to gather facts for localhost operations

  tasks:
    - name: get running ansible env variables
      set_fact:
        ibmcloud_api_key: "{{ lookup('env', 'API_KEY') }}"
        region: "{{ lookup('env', 'region') }}"
        target_instance_filter: "log-router"
        api_version_date: "2025-08-06"

    - name: Log in to IBM Cloud and get IAM token
      # Use the 'shell' module to execute ibmcloud login and then get the IAM token.
      # 'no_log: true' prevents sensitive data from appearing in Ansible logs.
      ansible.builtin.shell: |
        ibmcloud login --apikey "{{ API_KEY }}" --no-region >/dev/null 2>&1
        ibmcloud iam oauth-tokens --output JSON | jq -r '.iam_token'
      register: ibmcloud_auth_result
      changed_when: false
      failed_when: ibmcloud_auth_result.rc != 0 or
                   'FAILED' in ibmcloud_auth_result.stderr or
                   'Error' in ibmcloud_auth_result.stderr or
                   ibmcloud_auth_result.stdout | length == 0
      environment:
        API_KEY: "{{ ibmcloud_api_key }}" # Pass API_KEY to the shell environment

    - name: Set IAM Token fact
      set_fact:
        iam_token: "{{ ibmcloud_auth_result.stdout }}"
      when: ibmcloud_auth_result.rc == 0

    - name: Display IBM Cloud login success message
      ansible.builtin.debug:
        msg: "Authentication successful."
      when: ibmcloud_auth_result.rc == 0

    - name: Construct Logs Router API Endpoint
      set_fact:
        logs_router_api_endpoint: "https://management.{{ region }}.logs-router.cloud.ibm.com/v1/tenants"

    - name: Debug - Display Output (for troubleshooting)
      ansible.builtin.debug:
        msg: "output: {{ ibmcloud_auth_result.stdout }}"
        
    - name: Debug - Display IAM Token (for troubleshooting)
      ansible.builtin.debug:
        msg: "IAM Token (first 10 chars): {{ iam_token[:10] }}..."

    - name: Debug - Display API Version Date
      ansible.builtin.debug:
        msg: "API Version Date: {{ api_version_date }}"

    - name: Debug - Display Logs Router API Endpoint URL
      ansible.builtin.debug:
        msg: "Logs Router API Endpoint URL: {{ logs_router_api_endpoint }}"

    - name: Search for IBM Cloud Log Routing tenants
      ansible.builtin.uri:
        url: "{{ logs_router_api_endpoint }}"
        method: GET
        headers:
          Authorization: "Bearer {{ iam_token }}"
          IBM-API-Version: "{{ api_version_date }}"
        return_content: true # Get the response body
        status_code: 200 # Expect a 200 OK response
      register: api_response_raw
      # Fail if the API call itself returns an error status code
      failed_when: api_response_raw.status != 200

    - name: Parse and filter API response for tenants
      # Use 'jq' filter on the 'content' (JSON string) from the uri module
      set_fact:
        found_tenants_formatted: |
          {{ api_response_raw.content | from_json | json_query('tenants[?(@.type == `object` && (.crn | split(":")[5] | lower | contains(`' + target_region.lower() + '`)) && (.crn | lower | contains(`logs-router`)))] | [].{name: name, id: id, region: crn | split(":")[5], log_sink_crn: targets[0].log_sink_crn || "N/A", crn: crn}') }}

    - name: Display found IBM Cloud Log Routing tenants
      ansible.builtin.debug:
        msg: |
          Found IBM Cloud Log Routing tenants in region '{{ target_region }}':
          {% for tenant in found_tenants_formatted %}
          Tenant Name:     {{ tenant.name }}
          Tenant ID:       {{ tenant.id }}
          Region:          {{ tenant.region }}
          Log Sink CRN:    {{ tenant.log_sink_crn }}
          Log Router CRN:  {{ tenant.crn }}
          {% endfor %}
      when: found_tenants_formatted | length > 0

    - name: Inform if no IBM Cloud Log Routing tenants were found
      ansible.builtin.debug:
        msg: "No log routing tenants found in region '{{ target_region }}'."
      when: found_tenants_formatted | length == 0

    - name: Log out of IBM Cloud
      ansible.builtin.shell: |
        ibmcloud logout >/dev/null 2>&1
      changed_when: false
      failed_when: false # Logout might fail, but it shouldn't stop the playbook.
